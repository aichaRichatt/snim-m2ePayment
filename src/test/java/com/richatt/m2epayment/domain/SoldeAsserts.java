package com.richatt.m2epayment.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SoldeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldeAllPropertiesEquals(Solde expected, Solde actual) {
        assertSoldeAutoGeneratedPropertiesEquals(expected, actual);
        assertSoldeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldeAllUpdatablePropertiesEquals(Solde expected, Solde actual) {
        assertSoldeUpdatableFieldsEquals(expected, actual);
        assertSoldeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldeAutoGeneratedPropertiesEquals(Solde expected, Solde actual) {
        assertThat(expected)
            .as("Verify Solde auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldeUpdatableFieldsEquals(Solde expected, Solde actual) {
        assertThat(expected)
            .as("Verify Solde relevant properties")
            .satisfies(e -> assertThat(e.getClientRef()).as("check clientRef").isEqualTo(actual.getClientRef()))
            .satisfies(e -> assertThat(e.getClientName()).as("check clientName").isEqualTo(actual.getClientName()))
            .satisfies(e -> assertThat(e.getClientFirstname()).as("check clientFirstname").isEqualTo(actual.getClientFirstname()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getUpdatingDate()).as("check updatingDate").isEqualTo(actual.getUpdatingDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSoldeUpdatableRelationshipsEquals(Solde expected, Solde actual) {}
}
