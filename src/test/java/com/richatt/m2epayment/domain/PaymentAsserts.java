package com.richatt.m2epayment.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaymentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllPropertiesEquals(Payment expected, Payment actual) {
        assertPaymentAutoGeneratedPropertiesEquals(expected, actual);
        assertPaymentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAllUpdatablePropertiesEquals(Payment expected, Payment actual) {
        assertPaymentUpdatableFieldsEquals(expected, actual);
        assertPaymentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentAutoGeneratedPropertiesEquals(Payment expected, Payment actual) {
        assertThat(expected)
            .as("Verify Payment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableFieldsEquals(Payment expected, Payment actual) {
        assertThat(expected)
            .as("Verify Payment relevant properties")
            .satisfies(e -> assertThat(e.getTransactionId()).as("check transactionId").isEqualTo(actual.getTransactionId()))
            .satisfies(e -> assertThat(e.getPaidAmount()).as("check paidAmount").isEqualTo(actual.getPaidAmount()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getPayDate()).as("check payDate").isEqualTo(actual.getPayDate()))
            .satisfies(e -> assertThat(e.getClientRef()).as("check clientRef").isEqualTo(actual.getClientRef()))
            .satisfies(e -> assertThat(e.getWalletMessage()).as("check walletMessage").isEqualTo(actual.getWalletMessage()))
            .satisfies(e -> assertThat(e.getSapMessage()).as("check sapMessage").isEqualTo(actual.getSapMessage()))
            .satisfies(e -> assertThat(e.getPayWallet()).as("check payWallet").isEqualTo(actual.getPayWallet()))
            .satisfies(e -> assertThat(e.getPayWalletStatus()).as("check payWalletStatus").isEqualTo(actual.getPayWalletStatus()))
            .satisfies(e -> assertThat(e.getPaySapStatus()).as("check paySapStatus").isEqualTo(actual.getPaySapStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaymentUpdatableRelationshipsEquals(Payment expected, Payment actual) {}
}
